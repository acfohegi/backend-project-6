- const getFieldName = (property) => `data[${property}]`
- const getFieldId = (property) => `data_${property}`

mixin formFor(entity = null)
  form&attributes(attributes)
    block

mixin formField(tag, entity, entityName, propertyName, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - fieldName = getFieldName(propertyName)
  - fieldId = getFieldId(propertyName)
  - labelValue = t(`views.${entityName}.${propertyName}`)
  - fieldValue = _.get(entity, propertyName, '')
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for=fieldId
    )= labelValue
    if tag === 'textarea'
      textarea(
        id=fieldId
        name=fieldName
        class=classLine
      )&attributes(attributes) #{fieldValue}
    if tag === 'input'
      input(
        id=fieldId
        name=fieldName
        class=classLine
        value=fieldValue
      )&attributes(attributes)
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin input(entity, entityName, propertyName, errors = {})
  +formField('input', entity, entityName, propertyName, errors)&attributes(attributes)

mixin textarea(entity, entityName, propertyName, errors = {})
  +formField('textarea', entity, entityName, propertyName, errors)

mixin select(entity, entityName, propertyName, options, optionNameValue, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - fieldId = getFieldId(propertyName)
  - labelValue = t(`views.${entityName}.${propertyName}`)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for=fieldId
    )= labelValue
    select(
      id=fieldId
      name=getFieldName(propertyName)
      class=classLine
    )&attributes(attributes)
      option(selected=entity[propertyName] === undefined)
      each opt in options
        option(value=opt.id selected=opt.id === entity[propertyName]) #{opt[optionNameValue]}
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin labelsSelect(selectedLabels, entityName, propertyName, options, optionNameValue, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - fieldId = getFieldId(propertyName)
  - labelValue = t(`views.${entityName}.${propertyName}`)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for=fieldId
    )= labelValue
    select(
      id=fieldId
      name=getFieldName(propertyName)
      class=classLine
      multiple="multiple"
    )&attributes(attributes)
      each opt in options
        option(value=opt.id selected=selectedLabels.includes(opt.id)) #{opt[optionNameValue]}
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin filterSelect(filters, entityName, propertyName, propertyLocale, options, optionNameValue, errors = {})
  - selectedOptions = filters[propertyName]
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-select' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - fieldId = getFieldId(propertyName)
  - labelValue= t(`views.${entityName}.${propertyLocale}`)
  .col-12.col-md
    .input-group.mb-3
      label.input-group-text(
        for=fieldId
      )= labelValue
      select(
        id=fieldId
        name=propertyName
        class=classLine
      )&attributes(attributes)
        option(selected=selectedOptions.length === 0)
        each opt in options
          option(value=opt.id selected=selectedOptions.includes(opt.id.toString())) #{opt[optionNameValue]}
      if !_.isEmpty(propertyErrors)
        .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin submit(form = null)
  input(class='btn btn-primary' type='submit')&attributes(attributes)

mixin buttonTo(action, method)
  form(action=action, method="post")
    input(name="_method" type="hidden" value=method)
    input(type='submit')&attributes(attributes)

